// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "krak8s": Application Resource Href Factories
//
// Command:
// $ goagen
// --design=krak8s/design
// --out=$(GOPATH)/src/krak8s
// --version=v1.2.0-dirty

package app

import (
	"fmt"
	"strings"
)

// ApplicationHref returns the resource href.
func ApplicationHref(project, ns, app_ interface{}) string {
	paramproject := strings.TrimLeftFunc(fmt.Sprintf("%v", project), func(r rune) bool { return r == '/' })
	paramns := strings.TrimLeftFunc(fmt.Sprintf("%v", ns), func(r rune) bool { return r == '/' })
	paramapp_ := strings.TrimLeftFunc(fmt.Sprintf("%v", app_), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/v1/projects/%v/ns/%v/app/%v", paramproject, paramns, paramapp_)
}

// ClusterHref returns the resource href.
func ClusterHref(project, ns interface{}) string {
	paramproject := strings.TrimLeftFunc(fmt.Sprintf("%v", project), func(r rune) bool { return r == '/' })
	paramns := strings.TrimLeftFunc(fmt.Sprintf("%v", ns), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/v1/projects/%v/ns/%v/cluster", paramproject, paramns)
}

// NamespaceHref returns the resource href.
func NamespaceHref(project, ns interface{}) string {
	paramproject := strings.TrimLeftFunc(fmt.Sprintf("%v", project), func(r rune) bool { return r == '/' })
	paramns := strings.TrimLeftFunc(fmt.Sprintf("%v", ns), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/v1/projects/%v/ns/%v", paramproject, paramns)
}

// ProjectHref returns the resource href.
func ProjectHref(project interface{}) string {
	paramproject := strings.TrimLeftFunc(fmt.Sprintf("%v", project), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/v1/projects/%v", paramproject)
}
