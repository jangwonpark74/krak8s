// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "krak8s": Application Contexts
//
// Command:
// $ goagen
// --design=krak8s/design
// --out=$(GOPATH)/src/krak8s
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// DeployMethodsContext provides the methods deploy action context.
type DeployMethodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Client    string
	Namespace string
}

// NewDeployMethodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the methods controller deploy action.
func NewDeployMethodsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeployMethodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeployMethodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClient := req.Params["client"]
	if len(paramClient) > 0 {
		rawClient := paramClient[0]
		rctx.Client = rawClient
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeployMethodsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
