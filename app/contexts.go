// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "krak8s": Application Contexts
//
// Command:
// $ goagen
// --design=krak8s/design
// --out=$(GOPATH)/src/krak8s
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateChartContext provides the chart create action context.
type CreateChartContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ns      string
	Project string
	Payload *ChartPostBody
}

// NewCreateChartContext parses the incoming request URL and body, performs validations and creates the
// context used by the chart controller create action.
func NewCreateChartContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateChartContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateChartContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// Accepted sends a HTTP response with status code 202.
func (ctx *CreateChartContext) Accepted() error {
	ctx.ResponseData.WriteHeader(202)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateChartContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteChartContext provides the chart delete action context.
type DeleteChartContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Chart   string
	Ns      string
	Project string
}

// NewDeleteChartContext parses the incoming request URL and body, performs validations and creates the
// context used by the chart controller delete action.
func NewDeleteChartContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteChartContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteChartContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramChart := req.Params["chart"]
	if len(paramChart) > 0 {
		rawChart := paramChart[0]
		rctx.Chart = rawChart
	}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteChartContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteChartContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteChartContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetChartContext provides the chart get action context.
type GetChartContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Chart   string
	Ns      string
	Project string
}

// NewGetChartContext parses the incoming request URL and body, performs validations and creates the
// context used by the chart controller get action.
func NewGetChartContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetChartContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetChartContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramChart := req.Params["chart"]
	if len(paramChart) > 0 {
		rawChart := paramChart[0]
		rctx.Chart = rawChart
	}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetChartContext) OK(r *Chart) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/chart+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListChartContext provides the chart list action context.
type ListChartContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ns      string
	Project string
}

// NewListChartContext parses the incoming request URL and body, performs validations and creates the
// context used by the chart controller list action.
func NewListChartContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListChartContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListChartContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListChartContext) OK(r ChartCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/chart+json; type=collection")
	if r == nil {
		r = ChartCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// CreateMongoContext provides the mongo create action context.
type CreateMongoContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ns      string
	Project string
	Payload *MongoPostBody
}

// NewCreateMongoContext parses the incoming request URL and body, performs validations and creates the
// context used by the mongo controller create action.
func NewCreateMongoContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateMongoContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateMongoContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// Accepted sends a HTTP response with status code 202.
func (ctx *CreateMongoContext) Accepted() error {
	ctx.ResponseData.WriteHeader(202)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateMongoContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteMongoContext provides the mongo delete action context.
type DeleteMongoContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ns      string
	Project string
}

// NewDeleteMongoContext parses the incoming request URL and body, performs validations and creates the
// context used by the mongo controller delete action.
func NewDeleteMongoContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteMongoContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteMongoContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteMongoContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteMongoContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteMongoContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetMongoContext provides the mongo get action context.
type GetMongoContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ns      string
	Project string
}

// NewGetMongoContext parses the incoming request URL and body, performs validations and creates the
// context used by the mongo controller get action.
func NewGetMongoContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMongoContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMongoContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMongoContext) OK(r *Mongo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/mongo+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// CreateNamespaceContext provides the namespace create action context.
type CreateNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
	Payload *CreateNamespacePayload
}

// NewCreateNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller create action.
func NewCreateNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// createNamespacePayload is the namespace create action payload.
type createNamespacePayload struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createNamespacePayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Publicize creates CreateNamespacePayload from createNamespacePayload
func (payload *createNamespacePayload) Publicize() *CreateNamespacePayload {
	var pub CreateNamespacePayload
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreateNamespacePayload is the namespace create action payload.
type CreateNamespacePayload struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateNamespacePayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateNamespaceContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateNamespaceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteNamespaceContext provides the namespace delete action context.
type DeleteNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ns      string
	Project string
}

// NewDeleteNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller delete action.
func NewDeleteNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteNamespaceContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteNamespaceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteNamespaceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetNamespaceContext provides the namespace get action context.
type GetNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ns      string
	Project string
}

// NewGetNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller get action.
func NewGetNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNs := req.Params["ns"]
	if len(paramNs) > 0 {
		rawNs := paramNs[0]
		rctx.Ns = rawNs
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetNamespaceContext) OK(r *Namespace) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/namespace+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *GetNamespaceContext) OKLink(r *NamespaceLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/namespace+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListNamespaceContext provides the namespace list action context.
type ListNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewListNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller list action.
func NewListNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListNamespaceContext) OK(r NamespaceCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/namespace+json; type=collection")
	if r == nil {
		r = NamespaceCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListNamespaceContext) OKLink(r NamespaceLinkCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/namespace+json; type=collection")
	if r == nil {
		r = NamespaceLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// CreateProjectContext provides the project create action context.
type CreateProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateProjectPayload
}

// NewCreateProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller create action.
func NewCreateProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createProjectPayload is the project create action payload.
type createProjectPayload struct {
	Identity *string `form:"identity,omitempty" json:"identity,omitempty" xml:"identity,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createProjectPayload) Validate() (err error) {
	if payload.Identity == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "identity"))
	}
	return
}

// Publicize creates CreateProjectPayload from createProjectPayload
func (payload *createProjectPayload) Publicize() *CreateProjectPayload {
	var pub CreateProjectPayload
	if payload.Identity != nil {
		pub.Identity = *payload.Identity
	}
	return &pub
}

// CreateProjectPayload is the project create action payload.
type CreateProjectPayload struct {
	Identity string `form:"identity" json:"identity" xml:"identity"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateProjectPayload) Validate() (err error) {
	if payload.Identity == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "identity"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateProjectContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateProjectContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteProjectContext provides the project delete action context.
type DeleteProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewDeleteProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller delete action.
func NewDeleteProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteProjectContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteProjectContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteProjectContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetProjectContext provides the project get action context.
type GetProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewGetProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller get action.
func NewGetProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetProjectContext) OK(r *Project) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/project+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *GetProjectContext) OKLink(r *ProjectLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/project+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetProjectContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetProjectContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListProjectContext provides the project list action context.
type ListProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list action.
func NewListProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListProjectContext) OK(r ProjectCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/project+json; type=collection")
	if r == nil {
		r = ProjectCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListProjectContext) OKLink(r ProjectLinkCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/project+json; type=collection")
	if r == nil {
		r = ProjectLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
