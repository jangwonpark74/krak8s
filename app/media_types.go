// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "krak8s": Application Media Types
//
// Command:
// $ goagen
// --design=krak8s/design
// --out=$(GOPATH)/src/krak8s
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// MongoDB ReplicaSet instance representation type (default view)
//
// Identifier: application/mongo+json; view=default
type Mongo struct {
	// Application registry identifier
	Application string `form:"application" json:"application" xml:"application"`
	// Date of creation
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// Application version
	Version string `form:"version" json:"version" xml:"version"`
}

// Validate validates the Mongo media type instance.
func (mt *Mongo) Validate() (err error) {
	if mt.Application == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "application"))
	}
	if mt.Version == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "version"))
	}

	return
}

// Users and tennants of the system are represented as the type Project (default view)
//
// Identifier: application/namespace+json; view=default
type Namespace struct {
	// Date of creation
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// API href of the namespace
	Href string `form:"href" json:"href" xml:"href"`
	// namespace name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Namespace media type instance.
func (mt *Namespace) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}

	if utf8.RuneCountInString(mt.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 2, true))
	}
	return
}

// Users and tennants of the system are represented as the type Project (link view)
//
// Identifier: application/namespace+json; view=link
type NamespaceLink struct {
	// API href of the namespace
	Href string `form:"href" json:"href" xml:"href"`
	// namespace name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the NamespaceLink media type instance.
func (mt *NamespaceLink) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if utf8.RuneCountInString(mt.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 2, true))
	}
	return
}

// NamespaceCollection is the media type for an array of Namespace (default view)
//
// Identifier: application/namespace+json; type=collection; view=default
type NamespaceCollection []*Namespace

// Validate validates the NamespaceCollection media type instance.
func (mt NamespaceCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// NamespaceCollection is the media type for an array of Namespace (link view)
//
// Identifier: application/namespace+json; type=collection; view=link
type NamespaceLinkCollection []*NamespaceLink

// Validate validates the NamespaceLinkCollection media type instance.
func (mt NamespaceLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Users and tennants of the system are represented as the type Project (default view)
//
// Identifier: application/project+json; view=default
type Project struct {
	// Date of creation
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// API href of project
	Href string `form:"href" json:"href" xml:"href"`
	// identity of project
	ID string `form:"id" json:"id" xml:"id"`
}

// Validate validates the Project media type instance.
func (mt *Project) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}

	if utf8.RuneCountInString(mt.ID) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.id`, mt.ID, utf8.RuneCountInString(mt.ID), 2, true))
	}
	return
}

// Users and tennants of the system are represented as the type Project (link view)
//
// Identifier: application/project+json; view=link
type ProjectLink struct {
	// API href of project
	Href string `form:"href" json:"href" xml:"href"`
	// identity of project
	ID string `form:"id" json:"id" xml:"id"`
}

// Validate validates the ProjectLink media type instance.
func (mt *ProjectLink) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if utf8.RuneCountInString(mt.ID) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.id`, mt.ID, utf8.RuneCountInString(mt.ID), 2, true))
	}
	return
}

// ProjectCollection is the media type for an array of Project (default view)
//
// Identifier: application/project+json; type=collection; view=default
type ProjectCollection []*Project

// Validate validates the ProjectCollection media type instance.
func (mt ProjectCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ProjectCollection is the media type for an array of Project (link view)
//
// Identifier: application/project+json; type=collection; view=link
type ProjectLinkCollection []*ProjectLink

// Validate validates the ProjectLinkCollection media type instance.
func (mt ProjectLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
