consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  Chart:
    description: Helm chart representation type (default view)
    example:
      name: Quos nobis placeat iusto itaque.
      status:
        deployed_at: 2012-02-17T21:30:54-08:00
        notes: Impedit iste beatae odit et omnis.
        state: UNKNOWN
      version: Dolores in hic qui sed et voluptates.
    properties:
      name:
        description: Chart name
        example: Quos nobis placeat iusto itaque.
        type: string
      status:
        example:
          deployed_at: 2012-02-17T21:30:54-08:00
          notes: Impedit iste beatae odit et omnis.
          state: UNKNOWN
        properties:
          deployed_at:
            description: Last deployment time
            example: 2012-02-17T21:30:54-08:00
            format: date-time
            type: string
          notes:
            description: Additional chart notes (if provided)
            example: Impedit iste beatae odit et omnis.
            type: string
          state:
            description: Deployment state
            enum:
            - UNKNOWN
            - DEPLOYED
            - DELETED
            - SUPERSEDED
            - FAILED
            - DELETING
            example: UNKNOWN
            type: string
        required:
        - deployed_at
        - state
        type: object
      version:
        description: Application version
        example: Dolores in hic qui sed et voluptates.
        type: string
    required:
    - name
    - version
    - status
    title: 'Mediatype identifier: application/chart+json; view=default'
    type: object
  ChartCollection:
    description: ChartCollection is the media type for an array of Chart (default
      view)
    example:
    - name: Quos nobis placeat iusto itaque.
      status:
        deployed_at: 2012-02-17T21:30:54-08:00
        notes: Impedit iste beatae odit et omnis.
        state: UNKNOWN
      version: Dolores in hic qui sed et voluptates.
    - name: Quos nobis placeat iusto itaque.
      status:
        deployed_at: 2012-02-17T21:30:54-08:00
        notes: Impedit iste beatae odit et omnis.
        state: UNKNOWN
      version: Dolores in hic qui sed et voluptates.
    items:
      $ref: '#/definitions/Chart'
    title: 'Mediatype identifier: application/chart+json; type=collection; view=default'
    type: array
  ChartPostBody:
    example:
      name: Voluptatem illum aut corrupti.
      registry: Atque maxime autem et ea corporis.
      set: Id saepe aut provident occaecati.
      version: Minima inventore et nam aut et soluta.
    properties:
      name:
        description: Chart name
        example: Voluptatem illum aut corrupti.
        type: string
      registry:
        description: Chart's registry
        example: Atque maxime autem et ea corporis.
        type: string
      set:
        description: Chart config --set argument string
        example: Id saepe aut provident occaecati.
        type: string
      version:
        description: Chart version string
        example: Minima inventore et nam aut et soluta.
        type: string
    required:
    - name
    - version
    title: ChartPostBody
    type: object
  CreateNamespacePayload:
    example:
      name: Adipisci est iste voluptas.
    properties:
      name:
        example: Adipisci est iste voluptas.
        type: string
    required:
    - name
    title: CreateNamespacePayload
    type: object
  CreateProjectPayload:
    example:
      identity: Est nostrum id perferendis enim laboriosam.
    properties:
      identity:
        example: Est nostrum id perferendis enim laboriosam.
        type: string
    required:
    - identity
    title: CreateProjectPayload
    type: object
  Mongo:
    description: MongoDB ReplicaSet instance representation type (default view)
    example:
      application: Iusto inventore.
      created_at: 1990-12-11T22:09:50-08:00
      version: Non et quam consequatur distinctio cumque.
    properties:
      application:
        description: Application registry identifier
        example: Iusto inventore.
        type: string
      created_at:
        description: Date of creation
        example: 1990-12-11T22:09:50-08:00
        format: date-time
        type: string
      version:
        description: Application version
        example: Non et quam consequatur distinctio cumque.
        type: string
    required:
    - application
    - version
    - created_at
    title: 'Mediatype identifier: application/mongo+json; view=default'
    type: object
  MongoPostBody:
    example:
      application: Iusto sint et quidem alias et corporis.
      version: Explicabo enim dicta perferendis sunt nihil ratione.
    properties:
      application:
        default: quay.io/samsung_cnct/mongodb-replicaset
        description: Appplication Registry Identifier
        example: Iusto sint et quidem alias et corporis.
        type: string
      version:
        default: v1.2.0
        description: Appplication Version
        example: Explicabo enim dicta perferendis sunt nihil ratione.
        type: string
    required:
    - application
    - version
    title: MongoPostBody
    type: object
  Namespace:
    description: Users and tennants of the system are represented as the type Project
      (default view)
    example:
      created_at: 1980-06-29T21:44:51-07:00
      href: /projects/newco/ns/newco-prod
      name: newco-prod
    properties:
      created_at:
        description: Date of creation
        example: 1980-06-29T21:44:51-07:00
        format: date-time
        type: string
      href:
        description: API href of the namespace
        example: /projects/newco/ns/newco-prod
        type: string
      name:
        description: namespace name
        example: newco-prod
        minLength: 2
        type: string
    required:
    - name
    - href
    - created_at
    title: 'Mediatype identifier: application/namespace+json; view=default'
    type: object
  NamespaceCollection:
    description: NamespaceCollection is the media type for an array of Namespace (default
      view)
    example:
    - created_at: 1980-06-29T21:44:51-07:00
      href: /projects/newco/ns/newco-prod
      name: newco-prod
    - created_at: 1980-06-29T21:44:51-07:00
      href: /projects/newco/ns/newco-prod
      name: newco-prod
    items:
      $ref: '#/definitions/Namespace'
    title: 'Mediatype identifier: application/namespace+json; type=collection; view=default'
    type: array
  Project:
    description: Users and tennants of the system are represented as the type Project
      (default view)
    example:
      created_at: 1990-08-27T22:36:31-07:00
      href: /projects/newco
      id: newco
    properties:
      created_at:
        description: Date of creation
        example: 1990-08-27T22:36:31-07:00
        format: date-time
        type: string
      href:
        description: API href of project
        example: /projects/newco
        type: string
      id:
        description: identity of project
        example: newco
        minLength: 2
        type: string
    required:
    - id
    - href
    - created_at
    title: 'Mediatype identifier: application/project+json; view=default'
    type: object
  ProjectCollection:
    description: ProjectCollection is the media type for an array of Project (default
      view)
    example:
    - created_at: 1990-08-27T22:36:31-07:00
      href: /projects/newco
      id: newco
    items:
      $ref: '#/definitions/Project'
    title: 'Mediatype identifier: application/project+json; type=collection; view=default'
    type: array
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
host: localhost:8080
info:
  description: API Service for Kubernetes, Kraken, and Helm Commands
  license:
    name: Apache-2.0
    url: https://github.com/samsung-cnct/krak8s/blob/master/LICENSE
  title: krak8s API Server
  version: v1
paths:
  /openapi:
    get:
      operationId: openapi#/openapi
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /openapi.json:
    get:
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /openapi.yaml:
    get:
      operationId: openapi#/openapi.yaml
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.yaml
  /swagger:
    get:
      operationId: swagger#/swagger
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /swagger.yaml:
    get:
      operationId: swagger#/swagger.yaml
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.yaml
  /v1/projects:
    get:
      description: Retrieve all projects.
      operationId: project#list
      produces:
      - application/project+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectCollection'
      schemes:
      - http
      summary: list project
      tags:
      - project
    post:
      description: Create a new user/project
      operationId: project#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateProjectPayload'
      produces:
      - application/vnd.goa.error
      responses:
        "201":
          description: The requested resource has been created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: create project
      tags:
      - project
  /v1/projects/{project}:
    delete:
      operationId: project#delete
      parameters:
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete project
      tags:
      - project
    get:
      description: Retrieve project with given id.
      operationId: project#get
      parameters:
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      - application/project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: get project
      tags:
      - project
  /v1/projects/{project}/ns:
    get:
      description: Retrieve the collection of all namespaces in the project.
      operationId: namespace#list
      parameters:
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/namespace+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NamespaceCollection'
      schemes:
      - http
      summary: list namespace
      tags:
      - namespace
    post:
      description: Create a namespace in the specified project
      operationId: namespace#create
      parameters:
      - description: project name
        in: path
        name: project
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateNamespacePayload'
      produces:
      - application/vnd.goa.error
      responses:
        "201":
          description: The requested resource has been created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: create namespace
      tags:
      - namespace
  /v1/projects/{project}/ns/{ns}:
    delete:
      description: Delete the specified namespace (ns)
      operationId: namespace#delete
      parameters:
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete namespace
      tags:
      - namespace
    get:
      description: Get the details of the specified namespace (ns) in the project
      operationId: namespace#get
      parameters:
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/namespace+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Namespace'
      schemes:
      - http
      summary: get namespace
      tags:
      - namespace
  /v1/projects/{project}/ns/{ns}/chart:
    get:
      description: Retrieve the collection of all Helm Charts in the namespace.
      operationId: chart#list
      parameters:
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/chart+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ChartCollection'
      schemes:
      - http
      summary: list chart
      tags:
      - chart
    post:
      description: Create a Helm Chart deployment
      operationId: chart#create
      parameters:
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/ChartPostBody'
      produces:
      - application/vnd.goa.error
      responses:
        "202":
          description: The request has been accepted for processing
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: create chart
      tags:
      - chart
  /v1/projects/{project}/ns/{ns}/chart/{chart}:
    delete:
      description: Delete the specified Helm Chart deloyment
      operationId: chart#delete
      parameters:
      - in: path
        name: chart
        required: true
        type: string
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete chart
      tags:
      - chart
    get:
      description: Get the status of the specified Helm Chart deployment
      operationId: chart#get
      parameters:
      - in: path
        name: chart
        required: true
        type: string
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/chart+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Chart'
      schemes:
      - http
      summary: get chart
      tags:
      - chart
  /v1/projects/{project}/ns/{ns}/mongo:
    delete:
      description: Delete the MongoDB Deloyment)
      operationId: mongo#delete
      parameters:
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete mongo
      tags:
      - mongo
    get:
      description: Get the status of the MongoDB Deloyment
      operationId: mongo#get
      parameters:
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/mongo+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Mongo'
      schemes:
      - http
      summary: get mongo
      tags:
      - mongo
    post:
      description: Create a MongoDB
      operationId: mongo#create
      parameters:
      - description: namespace identifier
        in: path
        name: ns
        required: true
        type: string
      - description: project name
        in: path
        name: project
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/MongoPostBody'
      produces:
      - application/vnd.goa.error
      responses:
        "202":
          description: The request has been accepted for processing
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: create mongo
      tags:
      - mongo
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
  OK:
    description: OK
    schema:
      $ref: '#/definitions/Project'
schemes:
- http
swagger: "2.0"
