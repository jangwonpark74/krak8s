consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  Application:
    description: Application representation type (default view)
    example:
      created_at: 2007-12-31T06:53:54-08:00
      id: e1ea1660
      name: Nobis placeat iusto itaque tempora aliquam nemo.
      namespace_id: da9871c7
      status:
        deployed_at: 2007-02-14T06:00:13-08:00
        notes: Beatae odit.
        state: DELETED
      type: application
      updated_at: 1978-05-06T07:31:33-07:00
      version: Aperiam dolores in hic qui sed et.
    properties:
      created_at:
        description: Date of creation
        example: 2007-12-31T06:53:54-08:00
        format: date-time
        type: string
      id:
        description: generated resource unique id (8 character hexadecimal value)
        example: e1ea1660
        type: string
      name:
        description: Application name
        example: Nobis placeat iusto itaque tempora aliquam nemo.
        type: string
      namespace_id:
        description: The related namespace's generated unique id, not the namespace's
          name
        example: da9871c7
        type: string
      status:
        example:
          deployed_at: 2007-02-14T06:00:13-08:00
          notes: Beatae odit.
          state: DELETED
        properties:
          deployed_at:
            description: Last deployment time
            example: 2007-02-14T06:00:13-08:00
            format: date-time
            type: string
          notes:
            description: Application specific notification / statuses / notes (if
              any)
            example: Beatae odit.
            type: string
          state:
            description: Deployment state
            enum:
            - UNKNOWN
            - DEPLOYED
            - DELETED
            - SUPERSEDED
            - FAILED
            - DELETING
            example: DELETED
            type: string
        required:
        - deployed_at
        - state
        type: object
      type:
        description: 'constant: object type'
        example: application
        type: string
      updated_at:
        description: Date of last update
        example: 1978-05-06T07:31:33-07:00
        format: date-time
        type: string
      version:
        description: Application version
        example: Aperiam dolores in hic qui sed et.
        type: string
    required:
    - id
    - type
    - name
    - version
    - status
    - namespace_id
    - created_at
    - updated_at
    title: 'Mediatype identifier: application/application+json; view=default'
    type: object
  ApplicationCollection:
    description: ApplicationCollection is the media type for an array of Application
      (default view)
    example:
    - created_at: 2007-12-31T06:53:54-08:00
      id: e1ea1660
      name: Nobis placeat iusto itaque tempora aliquam nemo.
      namespace_id: da9871c7
      status:
        deployed_at: 2007-02-14T06:00:13-08:00
        notes: Beatae odit.
        state: DELETED
      type: application
      updated_at: 1978-05-06T07:31:33-07:00
      version: Aperiam dolores in hic qui sed et.
    items:
      $ref: '#/definitions/Application'
    title: 'Mediatype identifier: application/application+json; type=collection; view=default'
    type: array
  ApplicationPostBody:
    example:
      name: Libero qui facere est nostrum.
      namespace_id: da9871c7
      registry: Perferendis enim.
      set: Non adipisci.
      version: Iste voluptas debitis voluptatem illum.
    properties:
      name:
        description: Application name
        example: Libero qui facere est nostrum.
        type: string
      namespace_id:
        description: The related namespace's generated unique id, not the namespace's
          name
        example: da9871c7
        type: string
      registry:
        description: Application's registry
        example: Perferendis enim.
        type: string
      set:
        description: Application config --set argument string
        example: Non adipisci.
        type: string
      version:
        description: Application version string
        example: Iste voluptas debitis voluptatem illum.
        type: string
    required:
    - name
    - version
    - namespace_id
    title: ApplicationPostBody
    type: object
  ApplicationRef:
    description: An application object reference by object id (oid), and url (default
      view)
    example:
      oid: e1ea1660
      url: /v1/project/30299bea/applications
    properties:
      oid:
        description: The application resource unique oid
        example: e1ea1660
        type: string
      url:
        description: url of the collection that contains this object
        example: /v1/project/30299bea/applications
        type: string
    required:
    - oid
    - url
    title: 'Mediatype identifier: application/application.ref+json; view=default'
    type: object
  ApplicationRefCollection:
    description: ApplicationRefCollection is the media type for an array of ApplicationRef
      (default view)
    example:
    - oid: e1ea1660
      url: /v1/project/30299bea/applications
    - oid: e1ea1660
      url: /v1/project/30299bea/applications
    items:
      $ref: '#/definitions/ApplicationRef'
    title: 'Mediatype identifier: application/application.ref+json; type=collection;
      view=default'
    type: array
  Cluster:
    description: Cluster resource representation type (default view)
    example:
      created_at: 1988-11-12T15:18:46-08:00
      id: de2760b1
      namespace_id: da9871c7
      nodePoolSize: 1.7768362e+18
      state: create_requested
      type: cluster
      updated_at: 1990-12-11T22:09:50-08:00
    properties:
      created_at:
        description: Date of creation
        example: 1988-11-12T15:18:46-08:00
        format: date-time
        type: string
      id:
        description: generated resource unique id (8 character hexadecimal value)
        example: de2760b1
        type: string
      namespace_id:
        description: The related namespace's generated unique id, not the namespace's
          name
        example: da9871c7
        type: string
      nodePoolSize:
        description: Requested node pool size
        example: 1.7768362e+18
        format: int64
        type: integer
      state:
        description: Lifecycle state
        enum:
        - create_requested
        - starting
        - active
        - delete_requested
        - deleting
        - deleted
        example: create_requested
        type: string
      type:
        description: 'constant: object type'
        example: cluster
        type: string
      updated_at:
        description: Date of last update
        example: 1990-12-11T22:09:50-08:00
        format: date-time
        type: string
    required:
    - id
    - type
    - nodePoolSize
    - created_at
    - updated_at
    - state
    - namespace_id
    title: 'Mediatype identifier: application/cluster+json; view=default'
    type: object
  ClusterPostBody:
    example:
      namespace_id: da9871c7
      nodePoolSize: 7
    properties:
      namespace_id:
        description: The related namespace's generated unique id, not the namespace's
          name
        example: da9871c7
        type: string
      nodePoolSize:
        default: 3
        description: The number of worker nodes in the projects resource pool
        example: 7
        maximum: 11
        minimum: 3
        type: integer
    required:
    - nodePoolSize
    - namespace_id
    title: ClusterPostBody
    type: object
  ClusterRef:
    description: An cluster reesources object reference by object id (oid), and url
      (default view)
    example:
      oid: de2760b1
      url: /v1/project/30299bea/cluster
    properties:
      oid:
        description: The cluster resources resource unique oid
        example: de2760b1
        type: string
      url:
        description: url of the collection that contains this object
        example: /v1/project/30299bea/cluster
        type: string
    required:
    - oid
    - url
    title: 'Mediatype identifier: application/cluster.ref+json; view=default'
    type: object
  CreateNamespacePayload:
    example:
      name: Corporis eaque id saepe.
    properties:
      name:
        example: Corporis eaque id saepe.
        type: string
    required:
    - name
    title: CreateNamespacePayload
    type: object
  CreateProjectPayload:
    example:
      name: newco
    properties:
      name:
        description: name of project
        example: newco
        minLength: 2
        type: string
    required:
    - name
    title: CreateProjectPayload
    type: object
  ListApplicationPayload:
    example:
      namespaceid: Corrupti omnis atque maxime autem.
    properties:
      namespaceid:
        example: Corrupti omnis atque maxime autem.
        type: string
    required:
    - namespaceid
    title: ListApplicationPayload
    type: object
  Namespace:
    description: Users and tennants of the system are represented as the type Project
      (default view)
    example:
      applications:
      - oid: e1ea1660
        url: /v1/project/30299bea/applications
      created_at: 1994-10-14T20:16:57-07:00
      id: da9871c7
      name: newco-prod
      resources:
        oid: de2760b1
        url: /v1/project/30299bea/cluster
      type: namespace
    properties:
      applications:
        $ref: '#/definitions/ApplicationRefCollection'
      created_at:
        description: Date of creation
        example: 1994-10-14T20:16:57-07:00
        format: date-time
        type: string
      id:
        description: generated resource unique id (8 character hexadecimal value)
        example: da9871c7
        type: string
      name:
        description: system wide unique namespace name
        example: newco-prod
        minLength: 2
        type: string
      resources:
        $ref: '#/definitions/ClusterRef'
      type:
        description: 'constant: object type'
        example: namespace
        type: string
    required:
    - id
    - type
    - name
    - created_at
    - resources
    - applications
    title: 'Mediatype identifier: application/namespace+json; view=default'
    type: object
  NamespaceCollection:
    description: NamespaceCollection is the media type for an array of Namespace (default
      view)
    example:
    - applications:
      - oid: e1ea1660
        url: /v1/project/30299bea/applications
      created_at: 1994-10-14T20:16:57-07:00
      id: da9871c7
      name: newco-prod
      resources:
        oid: de2760b1
        url: /v1/project/30299bea/cluster
      type: namespace
    - applications:
      - oid: e1ea1660
        url: /v1/project/30299bea/applications
      created_at: 1994-10-14T20:16:57-07:00
      id: da9871c7
      name: newco-prod
      resources:
        oid: de2760b1
        url: /v1/project/30299bea/cluster
      type: namespace
    - applications:
      - oid: e1ea1660
        url: /v1/project/30299bea/applications
      created_at: 1994-10-14T20:16:57-07:00
      id: da9871c7
      name: newco-prod
      resources:
        oid: de2760b1
        url: /v1/project/30299bea/cluster
      type: namespace
    items:
      $ref: '#/definitions/Namespace'
    title: 'Mediatype identifier: application/namespace+json; type=collection; view=default'
    type: array
  NamespaceRef:
    description: Users and tennants of the system are represented as the type Project
      (default view)
    example:
      oid: da9871c7
      url: /v1/project/30299bea/namespaces
    properties:
      oid:
        description: The namespace resource unique oid
        example: da9871c7
        type: string
      url:
        description: url of the collection that contains this object
        example: /v1/project/30299bea/namespaces
        type: string
    required:
    - oid
    - url
    title: 'Mediatype identifier: application/namespace.ref+json; view=default'
    type: object
  NamespaceRefCollection:
    description: NamespaceRefCollection is the media type for an array of NamespaceRef
      (default view)
    example:
    - oid: da9871c7
      url: /v1/project/30299bea/namespaces
    items:
      $ref: '#/definitions/NamespaceRef'
    title: 'Mediatype identifier: application/namespace.ref+json; type=collection;
      view=default'
    type: array
  Project:
    description: Users and tennants of the system are represented as the type Project
      (default view)
    example:
      created_at: 1991-05-26T01:29:46-07:00
      id: 30299bea
      name: newco
      namespaces:
      - oid: da9871c7
        url: /v1/project/30299bea/namespaces
      type: project
    properties:
      created_at:
        description: Date of creation
        example: 1991-05-26T01:29:46-07:00
        format: date-time
        type: string
      id:
        description: generated resource unique id (8 character hexadecimal value)
        example: 30299bea
        type: string
      name:
        description: name of project
        example: newco
        minLength: 2
        type: string
      namespaces:
        $ref: '#/definitions/NamespaceRefCollection'
      type:
        description: 'constant: object type'
        example: project
        type: string
    required:
    - id
    - type
    - name
    - created_at
    - namespaces
    title: 'Mediatype identifier: application/project+json; view=default'
    type: object
  ProjectCollection:
    description: ProjectCollection is the media type for an array of Project (default
      view)
    example:
    - created_at: 1991-05-26T01:29:46-07:00
      id: 30299bea
      name: newco
      namespaces:
      - oid: da9871c7
        url: /v1/project/30299bea/namespaces
      type: project
    - created_at: 1991-05-26T01:29:46-07:00
      id: 30299bea
      name: newco
      namespaces:
      - oid: da9871c7
        url: /v1/project/30299bea/namespaces
      type: project
    - created_at: 1991-05-26T01:29:46-07:00
      id: 30299bea
      name: newco
      namespaces:
      - oid: da9871c7
        url: /v1/project/30299bea/namespaces
      type: project
    items:
      $ref: '#/definitions/Project'
    title: 'Mediatype identifier: application/project+json; type=collection; view=default'
    type: array
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
externalDocs:
  description: API Defintions
  url: https://github.com/samsung-cnct/krak8s/blob/master/API%20Definitions.md
host: localhost:8080
info:
  description: API Service for Kubernetes, Kraken, and Helm Commands
  license:
    name: Apache 2.0
    url: https://github.com/samsung-cnct/krak8s/blob/master/LICENSE
  title: krak8s API Server
  version: v1
paths:
  /openapi:
    get:
      operationId: openapi#/openapi
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /openapi.json:
    get:
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /openapi.yaml:
    get:
      operationId: openapi#/openapi.yaml
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.yaml
  /swagger:
    get:
      operationId: swagger#/swagger
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /swagger.yaml:
    get:
      operationId: swagger#/swagger.yaml
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.yaml
  /v1/healthz:
    get:
      description: The health check service endpoint
      operationId: health#health
      produces:
      - text/plain
      responses:
        "200":
          description: OK
      schemes:
      - http
      summary: health health
      tags:
      - health
  /v1/projects:
    get:
      description: Retrieve all projects.
      operationId: project#list
      produces:
      - application/project+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectCollection'
      schemes:
      - http
      summary: list project
      tags:
      - project
    post:
      description: Create a new project entry with the provided name.
      operationId: project#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateProjectPayload'
      produces:
      - application/vnd.goa.error
      - application/project+json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
      schemes:
      - http
      summary: create project
      tags:
      - project
  /v1/projects/{projectid}:
    delete:
      operationId: project#delete
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete project
      tags:
      - project
    get:
      description: Retrieve project with given id.
      operationId: project#get
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      - application/project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: get project
      tags:
      - project
  /v1/projects/{projectid}/applications:
    get:
      description: Retrieve the collection of all applications in the project/namespace.
      operationId: application#list
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/ListApplicationPayload'
      produces:
      - application/application+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApplicationCollection'
        "404":
          description: Not Found
      schemes:
      - http
      summary: list application
      tags:
      - application
    post:
      description: Request the creation of an application deployment in the project/namespace
      operationId: application#create
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/ApplicationPostBody'
      produces:
      - application/application+json
      - application/vnd.goa.error
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/Application'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      schemes:
      - http
      summary: create application
      tags:
      - application
  /v1/projects/{projectid}/applications/{appid}:
    delete:
      description: Delete the specified application from the project/namespace
      operationId: application#delete
      parameters:
      - in: path
        name: appid
        required: true
        type: string
      - in: path
        name: projectid
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete application
      tags:
      - application
    get:
      description: Get the status of the specified application in the project/namespace
      operationId: application#get
      parameters:
      - in: path
        name: appid
        required: true
        type: string
      - in: path
        name: projectid
        required: true
        type: string
      produces:
      - application/application+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Application'
        "404":
          description: Not Found
      schemes:
      - http
      summary: get application
      tags:
      - application
  /v1/projects/{projectid}/cluster:
    post:
      description: Request the creation of the cluster resources in the project/namespace
      operationId: cluster#create
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/ClusterPostBody'
      produces:
      - application/cluster+json
      - application/vnd.goa.error
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/Cluster'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      schemes:
      - http
      summary: create cluster
      tags:
      - cluster
  /v1/projects/{projectid}/cluster/{resource_id}:
    delete:
      description: Delete the cluster resources from the project/namespace
      operationId: cluster#delete
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      - in: path
        name: resource_id
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete cluster
      tags:
      - cluster
    get:
      description: Get the status of the cluster resources in the project/namespace
      operationId: cluster#get
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      - in: path
        name: resource_id
        required: true
        type: string
      produces:
      - application/cluster+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Cluster'
        "404":
          description: Not Found
      schemes:
      - http
      summary: get cluster
      tags:
      - cluster
  /v1/projects/{projectid}/namespaces:
    get:
      description: Retrieve all projects.
      operationId: namespace#list
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      produces:
      - application/namespace+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NamespaceCollection'
      schemes:
      - http
      summary: list namespace
      tags:
      - namespace
    post:
      description: Create a namespace in the specified project
      operationId: namespace#create
      parameters:
      - in: path
        name: projectid
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateNamespacePayload'
      produces:
      - application/vnd.goa.error
      - application/namespace+json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Namespace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      schemes:
      - http
      summary: create namespace
      tags:
      - namespace
  /v1/projects/{projectid}/namespaces/{namespaceid}:
    delete:
      description: Delete the specified namespace from the project
      operationId: namespace#delete
      parameters:
      - in: path
        name: namespaceid
        required: true
        type: string
      - in: path
        name: projectid
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete namespace
      tags:
      - namespace
    get:
      description: Get the details of the specified namespace from the project
      operationId: namespace#get
      parameters:
      - in: path
        name: namespaceid
        required: true
        type: string
      - in: path
        name: projectid
        required: true
        type: string
      produces:
      - application/namespace+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Namespace'
        "404":
          description: Not Found
      schemes:
      - http
      summary: get namespace
      tags:
      - namespace
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  Conflict:
    description: Conflict
  InternalServerError:
    description: Internal Server Error
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
schemes:
- http
swagger: "2.0"
