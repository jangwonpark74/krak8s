// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "krak8s": goa_chart Resource Client
//
// Command:
// $ goagen
// --design=krak8s/design
// --out=$(GOPATH)/src/krak8s
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateGoaChartPath computes a request path to the create action of goa_chart.
func CreateGoaChartPath(project string, ns string) string {
	param0 := project
	param1 := ns

	return fmt.Sprintf("/v1/projects/%s/ns/%s/chart", param0, param1)
}

// Create a Helm Chart deployment
func (c *Client) CreateGoaChart(ctx context.Context, path string, payload *ChartPostBody, contentType string) (*http.Response, error) {
	req, err := c.NewCreateGoaChartRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateGoaChartRequest create the request corresponding to the create action endpoint of the goa_chart resource.
func (c *Client) NewCreateGoaChartRequest(ctx context.Context, path string, payload *ChartPostBody, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteGoaChartPath computes a request path to the delete action of goa_chart.
func DeleteGoaChartPath(project string, ns string, chart string) string {
	param0 := project
	param1 := ns
	param2 := chart

	return fmt.Sprintf("/v1/projects/%s/ns/%s/chart/%s", param0, param1, param2)
}

// Delete the specified Helm Chart deloyment
func (c *Client) DeleteGoaChart(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteGoaChartRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteGoaChartRequest create the request corresponding to the delete action endpoint of the goa_chart resource.
func (c *Client) NewDeleteGoaChartRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetGoaChartPath computes a request path to the get action of goa_chart.
func GetGoaChartPath(project string, ns string, chart string) string {
	param0 := project
	param1 := ns
	param2 := chart

	return fmt.Sprintf("/v1/projects/%s/ns/%s/chart/%s", param0, param1, param2)
}

// Get the status of the specified Helm Chart deployment
func (c *Client) GetGoaChart(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetGoaChartRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetGoaChartRequest create the request corresponding to the get action endpoint of the goa_chart resource.
func (c *Client) NewGetGoaChartRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListGoaChartPath computes a request path to the list action of goa_chart.
func ListGoaChartPath(project string, ns string) string {
	param0 := project
	param1 := ns

	return fmt.Sprintf("/v1/projects/%s/ns/%s/chart", param0, param1)
}

// Retrieve the collection of all Helm Charts in the namespace.
func (c *Client) ListGoaChart(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListGoaChartRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListGoaChartRequest create the request corresponding to the list action endpoint of the goa_chart resource.
func (c *Client) NewListGoaChartRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
