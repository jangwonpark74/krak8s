// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "krak8s": goa_mongo Resource Client
//
// Command:
// $ goagen
// --design=krak8s/design
// --out=$(GOPATH)/src/krak8s
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateGoaMongoPath computes a request path to the create action of goa_mongo.
func CreateGoaMongoPath(project string, ns string) string {
	param0 := project
	param1 := ns

	return fmt.Sprintf("/v1/projects/%s/ns/%s/mongo", param0, param1)
}

// Create a MongoDB
func (c *Client) CreateGoaMongo(ctx context.Context, path string, payload *MongoPostBody, contentType string) (*http.Response, error) {
	req, err := c.NewCreateGoaMongoRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateGoaMongoRequest create the request corresponding to the create action endpoint of the goa_mongo resource.
func (c *Client) NewCreateGoaMongoRequest(ctx context.Context, path string, payload *MongoPostBody, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteGoaMongoPath computes a request path to the delete action of goa_mongo.
func DeleteGoaMongoPath(project string, ns string) string {
	param0 := project
	param1 := ns

	return fmt.Sprintf("/v1/projects/%s/ns/%s/mongo", param0, param1)
}

// Delete the MongoDB Deloyment)
func (c *Client) DeleteGoaMongo(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteGoaMongoRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteGoaMongoRequest create the request corresponding to the delete action endpoint of the goa_mongo resource.
func (c *Client) NewDeleteGoaMongoRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetGoaMongoPath computes a request path to the get action of goa_mongo.
func GetGoaMongoPath(project string, ns string) string {
	param0 := project
	param1 := ns

	return fmt.Sprintf("/v1/projects/%s/ns/%s/mongo", param0, param1)
}

// Get the status of the MongoDB Deloyment
func (c *Client) GetGoaMongo(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetGoaMongoRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetGoaMongoRequest create the request corresponding to the get action endpoint of the goa_mongo resource.
func (c *Client) NewGetGoaMongoRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
